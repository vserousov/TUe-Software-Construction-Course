//# BEGIN SKELETON
import java.util.Set;

/**
 * Main frame (window) of the application.
 *
 * @author Tom Verhoeff (TU/e)
<!--//# BEGIN TODO Name, group id, and date-->
Serousov Vitaly, 201 SE, 11.12.2014
<!--//# END TODO-->
 */
// -----8<----- cut line -----8<-----
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame.
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabelMax = new javax.swing.JLabel();
        jTextFieldMax = new javax.swing.JTextField();
        jLabelSum = new javax.swing.JLabel();
        jTextFieldSum = new javax.swing.JTextField();
        jLabelLength = new javax.swing.JLabel();
        jTextFieldLength = new javax.swing.JTextField();
        jCheckBoxList = new javax.swing.JCheckBox();
        jCheckBoxCount = new javax.swing.JCheckBox();
        jCheckBoxIntersection = new javax.swing.JCheckBox();
        jCheckBoxElimination = new javax.swing.JCheckBox();
        jButtonGenerate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButtonAbort = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simple Kakuro Helper 3");

        jLabelMax.setText("Max");

        jTextFieldMax.setColumns(3);
        jTextFieldMax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldMax.setText("9");

        jLabelSum.setText("Sum");

        jTextFieldSum.setColumns(3);
        jTextFieldSum.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabelLength.setText("Length");

        jTextFieldLength.setColumns(3);
        jTextFieldLength.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jCheckBoxList.setText("List");

        jCheckBoxCount.setSelected(true);
        jCheckBoxCount.setText("Count");

        jCheckBoxIntersection.setText("Intersection");

        jCheckBoxElimination.setText("Elimination");

        jButtonGenerate.setText("Generate");
        jButtonGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerateActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButtonAbort.setText("Abort");
        jButtonAbort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAbortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(jLabelLength)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jTextFieldLength, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addContainerGap()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jCheckBoxList)
                                                                        .addComponent(jCheckBoxCount)
                                                                        .addComponent(jCheckBoxIntersection)
                                                                        .addComponent(jCheckBoxElimination)
                                                                        .addComponent(jButtonGenerate)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGap(37, 37, 37)
                                                                                .addComponent(jLabelMax)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(jTextFieldMax, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                                .addComponent(jLabelSum)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(jTextFieldSum, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                                .addGap(18, 18, 18))
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jButtonAbort)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jTextFieldMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabelMax))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jTextFieldSum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabelSum))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jTextFieldLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabelLength))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jCheckBoxList)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jCheckBoxCount)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jCheckBoxIntersection)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jCheckBoxElimination)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButtonGenerate)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jButtonAbort))
                                        .addComponent(jScrollPane1))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    /** The generator. */
    private KCGeneratorProxy generator;

    private void jButtonGenerateActionPerformed(java.awt.event.ActionEvent evt) {
        // NOTE
        // This method could (in fact, should) be refactored (decomposed),
        // but that should also be accompanied by other redesigns,
        // which are not the focus of this assignment.

        /** The generator observers. */
        final CompositeGeneratorObserver<Set<Integer>> observers;

        int max; // maximum number set in text field
        int sum; // sum set in text field
        int length; // length set in text field

        jTextArea1.setText("");
        // get and check generator parameters
        try {
            max = Integer.parseInt(jTextFieldMax.getText());
            sum = Integer.parseInt(jTextFieldSum.getText());
            length = Integer.parseInt(jTextFieldLength.getText());
        } catch (NumberFormatException e) {
            jTextArea1.setText("Needs 2 numbers");
            return;
        }
        if (! (0 <= max)) {
            jTextArea1.append("0 <= Max required");
            return;
        }
        if (! (0 <= length && length <= max)) {
            jTextArea1.append("0 <= Length <= Max required");
            return;
        }

        final Counter counter = new Counter();
        final Intersector intersection = new Intersector(max, false);
        final Intersector elimination = new Intersector(max, true);

        // prepare generator
        generator = new KCGeneratorProxy();
        generator.setMaxNumber(max);

        observers = new CompositeGeneratorObserver<Set<Integer>>();

        generator.setResultListener(new KCGeneratorProxy.ResultListener() {
            @Override
            public void generationDone(Exception exception) {
                if (exception instanceof InterruptedException) {
                    jTextArea1.append("Background generation was interrupted.\n");
                } else {

                    // show observer results
                    if (jCheckBoxCount.isSelected()) {
                        jTextArea1.append("Number of combinations generated: "
                                + counter.getCount() + "\n");
                    }

                    // Show the results of intersection
                    if (jCheckBoxIntersection.isSelected() && counter.getCount() > 0) {
                        jTextArea1.append("Intersection: " + intersection.getIntersection() + "\n");
                    }

                    // Show the results of elimination
                    if (jCheckBoxElimination.isSelected() && counter.getCount() > 0) {
                        jTextArea1.append("Elimination: " + elimination.getIntersection() + "\n");
                    }

                    jButtonAbort.setEnabled(false);
                    jButtonGenerate.setEnabled(true);
                }
            }
        });

        jTextArea1.setText(null);

        if (jCheckBoxList.isSelected()) {
            observers.add(new PushPullAdapter(new Lister(), true));
        }

        if (jCheckBoxCount.isSelected()) {
            observers.add(new PushPullAdapter(counter, true));
        }

        // Add intersection to observer if checkbox is checked
        if (jCheckBoxIntersection.isSelected()) {
            observers.add(new PushPullAdapter(intersection, true));
        }

        // Add elimination to observer if checkbox is checked
        if (jCheckBoxElimination.isSelected()) {
            observers.add(new PushPullAdapter(elimination, true));
        }

        generator.setObserver(observers);

        jButtonGenerate.setEnabled(false);
        jButtonAbort.setEnabled(true);

        // invoke generator
        generator.generate(sum, length);

    }

    private void jButtonAbortActionPerformed(java.awt.event.ActionEvent evt) {
        generator.abort();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame frame1 = new MainFrame();
                frame1.setVisible(true);
                frame1.setLocation((int)frame1.getSize().getWidth(), frame1.getY());
                MainFrame frame2 = new MainFrame();
                frame2.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButtonAbort;
    private javax.swing.JButton jButtonGenerate;
    private javax.swing.JCheckBox jCheckBoxCount;
    private javax.swing.JCheckBox jCheckBoxElimination;
    private javax.swing.JCheckBox jCheckBoxIntersection;
    private javax.swing.JCheckBox jCheckBoxList;
    private javax.swing.JLabel jLabelLength;
    private javax.swing.JLabel jLabelMax;
    private javax.swing.JLabel jLabelSum;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldLength;
    private javax.swing.JTextField jTextFieldMax;
    private javax.swing.JTextField jTextFieldSum;
    // End of variables declaration                   

    /** Listener that appends generated combinations to the text area. */
    private class Lister implements GeneratorListener {
        @Override
        public void combinationGenerated(Set<Integer> combination) {
            jTextArea1.append(combination.toString() + "\n");
        }
    }

}
//# END SKELETON
